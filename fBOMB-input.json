{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.9._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"},"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"},"project:/contracts/Max-20-UUPS-LZ.sol":{"content":"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\n *\n * @title Max-20-UUPS-LZ-Implementation\n * @author Max Flow O2 -> @MaxFlowO2 on bird app/GitHub\n * @notice \n */\n\n// SPDX-License-Identifier: Apache-2.0\n\n/******************************************************************************\n * Copyright 2022 Max Flow O2                                                 *\n *                                                                            *\n * Licensed under the Apache License, Version 2.0 (the \"License\");            *\n * you may not use this file except in compliance with the License.           *\n * You may obtain a copy of the License at                                    *\n *                                                                            *\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\n *                                                                            *\n * Unless required by applicable law or agreed to in writing, software        *\n * distributed under the License is distributed on an \"AS IS\" BASIS,          *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\n * See the License for the specific language governing permissions and        *\n * limitations under the License.                                             *\n ******************************************************************************/\n\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"./eip/20/IERC20.sol\";\nimport \"./eip/20/IERC20Burn.sol\";\nimport \"./lib/Safe20.sol\";\nimport \"./lib/20.sol\";\nimport \"./modules/access/MaxAccess.sol\";\nimport \"./lib/Roles.sol\";\nimport \"./lib/Lists.sol\";\nimport \"./lz/ILayerZeroReceiver.sol\";\nimport \"./lz/ILayerZeroEndpoint.sol\";\nimport \"./errors/MaxErrors.sol\";\n\nabstract contract Max20ImplementationUUPSLZ is Initializable\n                                             , MaxErrors\n                                             , MaxAccess\n                                             , ILayerZeroReceiver\n                                             , IERC20 {\n\n  //////////////////////////////////////\n  // Storage\n  //////////////////////////////////////\n\n  using Lib20 for Lib20.Token;\n  using Lists for Lists.Access;\n  using Roles for Roles.Role;\n  using Safe20 for IERC20;\n\n  Lib20.Token internal token20;\n  Roles.Role internal contractRoles;\n  Lists.Access internal taxExempt;\n\n  bytes4 constant internal DEVS = 0xca4b208b;\n  bytes4 constant internal PENDING_DEVS = 0xca4b208a; // DEVS - 1\n  bytes4 constant internal OWNERS = 0x8da5cb5b;\n  bytes4 constant internal PENDING_OWNERS = 0x8da5cb5a; // OWNERS - 1\n  bytes4 constant internal ADMIN = 0xf851a440;\n\n  address internal Token;\n  address internal WToken;\n  address internal treasury;\n\n  //////////////////////////////////////\n  // LayerZero Storage\n  //////////////////////////////////////\n\n  ILayerZeroEndpoint internal endpoint;\n\n  struct FailedMessages {\n    uint payloadLength;\n    bytes32 payloadHash;\n  }\n\n  mapping(uint16 => mapping(bytes => mapping(uint => FailedMessages))) public failedMessages;\n  mapping(uint16 => bytes) public trustedRemoteLookup;\n  uint256 internal gasForDestinationLzReceive;\n\n  event TrustedRemoteSet(uint16 _chainId, bytes _trustedRemote);\n  event EndpointSet(address indexed _endpoint);\n  event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload);\n\n  ///////////////////////\n  // MAX-20: Modifiers\n  ///////////////////////\n\n  modifier onlyRole(bytes4 role) {\n    if (contractRoles.has(role, msg.sender) || contractRoles.has(ADMIN, msg.sender)) {\n      _;\n    } else {\n    revert Unauthorized();\n    }\n  }\n\n  modifier onlyOwner() {\n    if (contractRoles.has(OWNERS, msg.sender)) {\n      _;\n    } else {\n    revert Unauthorized();\n    }\n  }\n\n  modifier onlyDev() {\n    if (contractRoles.has(DEVS, msg.sender)) {\n      _;\n    } else {\n    revert Unauthorized();\n    }\n  }\n\n  ///////////////////////\n  /// MAX-20: Internals\n  ///////////////////////\n\n  function __Max20_init(\n    string memory _name\n  , string memory _symbol\n  , uint8 _decimals\n  , address _admin\n  , address _dev\n  , address _owner\n  ) internal \n    onlyInitializing() {\n    token20.setName(_name);\n    token20.setSymbol(_symbol);\n    token20.setDecimals(_decimals);\n    contractRoles.add(ADMIN, _admin);\n    contractRoles.setAdmin(_admin);\n    contractRoles.add(DEVS, _dev);\n    contractRoles.setDeveloper(_dev);\n    contractRoles.add(OWNERS, _owner);\n    contractRoles.setOwner(_owner);\n  }\n\n  //////////////////////////\n  // EIP-20: Token Standard\n  //////////////////////////\n\n  /// @dev OPTIONAL - This method can be used to improve usability, but interfaces and other\n  ///      contracts MUST NOT expect these values to be present.\n  /// @return string memory returns the name of the token - e.g. \"MyToken\".\n  function name()\n    external\n    view\n    virtual\n    override\n    returns (string memory) {\n    return token20.getName();\n  }\n\n  /// @dev OPTIONAL - This method can be used to improve usability, but interfaces and other\n  ///      contracts MUST NOT expect these values to be present.\n  /// @return string memory returns the symbol of the token. E.g. “HIX”.\n  function symbol()\n    external\n    view\n    virtual\n    override\n    returns (string memory) {\n    return token20.getSymbol();\n  }\n\n  /// @dev OPTIONAL - This method can be used to improve usability, but interfaces and other\n  ///      contracts MUST NOT expect these values to be present.\n  /// @return uint8 returns the number of decimals the token uses - e.g. 8, means to divide the\n  ///         token amount by 100000000 to get its user representation.\n  function decimals()\n    external\n    view\n    virtual\n    override\n    returns (uint8) {\n    return token20.getDecimals();\n  }\n\n  /// @dev totalSupply\n  /// @return uint256 returns the total token supply.\n  function totalSupply()\n    external\n    view\n    virtual\n    override\n    returns (uint256) {\n    return token20.getTotalSupply();\n  }\n\n  /// @dev balanceOf\n  /// @return balance returns the account balance of another account with address _owner.\n  function balanceOf(\n    address _owner\n  ) external\n    view\n    virtual\n    override\n    returns (uint256 balance) {\n    balance = token20.getBalanceOf(_owner);\n  }\n\n  /// @dev transfer\n  /// @return success\n  /// @notice Transfers _value amount of tokens to address _to, and MUST fire the Transfer event.\n  ///         The function SHOULD throw if the message caller’s account balance does not have enough\n  ///         tokens to spend.\n  /// @notice Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer\n  ///         event.\n  function transfer(\n    address _to\n  , uint256 _value\n  ) external\n    virtual\n    override\n    returns (bool success) {\n    if (_to == address(0)) {\n      revert MaxSplaining({\n        reason: \"Max20: to address(0)\"\n      });\n    } else {\n      success = token20.doTransfer(msg.sender, _to, _value);\n      emit Transfer(msg.sender, _to, _value);\n    }\n  }\n\n  /// @dev transferFrom\n  /// @return success\n  /// @notice The transferFrom method is used for a withdraw workflow, allowing contracts to transfer\n  ///         tokens on your behalf. This can be used for example to allow a contract to transfer\n  ///         tokens on your behalf and/or to charge fees in sub-currencies. The function SHOULD\n  ///         throw unless the _from account has deliberately authorized the sender of the message\n  ///         via some mechanism.\n  /// @notice Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer\n  ///         event.\n  function transferFrom(\n    address _from\n  , address _to\n  , uint256 _value\n  ) external\n    virtual\n    override\n    returns (bool success) {\n    uint256 approveBal = this.allowance(_from, msg.sender);\n    if (_from == address(0) || _to == address(0)) {\n      revert MaxSplaining({\n        reason: \"Max20: to/from address(0)\"\n      });\n    } else if (approveBal >= _value) {\n      revert MaxSplaining({\n        reason: \"Max20: not approved to spend _value\"\n      });\n    } else {\n      success = token20.doTransfer(_from, _to, _value);\n      emit Transfer(_from, _to, _value);\n    }\n  }\n\n  /// @dev approve\n  /// @return success\n  /// @notice Allows _spender to withdraw from your account multiple times, up to the _value amount.\n  ///         If this function is called again it overwrites the current allowance with _value.\n  /// @notice To prevent attack vectors like the one described here and discussed here, clients\n  ///         SHOULD make sure to create user interfaces in such a way that they set the allowance\n  ///         first to 0 before setting it to another value for the same spender. THOUGH The contract\n  ///         itself shouldn’t enforce it, to allow backwards compatibility with contracts deployed\n  ///         before\n  function approve(\n    address _spender\n  , uint256 _value\n  ) external\n    virtual\n    override\n    returns (bool success) {\n    success = token20.setApprove(msg.sender, _spender, _value);\n    emit Approval(msg.sender, _spender, _value);\n  }\n\n  /// @dev allowance\n  /// @return remaining uint256 of allowance remaining\n  /// @notice Returns the amount which _spender is still allowed to withdraw from _owner.\n  function allowance(\n    address _owner\n  , address _spender\n  ) external\n    view\n    virtual\n    override\n    returns (uint256 remaining) {\n    return token20.getAllowance(_owner, _spender);\n  }\n\n  ///////////////////\n  /// LayerZero: NBR\n  ///////////////////\n\n  // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\n  // @param _srcChainId - the source endpoint identifier\n  // @param _srcAddress - the source sending contract address from the source chain\n  // @param _nonce - the ordered message nonce\n  // @param _payload - the signed payload is the UA bytes has encoded to be sent\n  function lzReceive(\n    uint16 _srcChainId\n  , bytes memory _srcAddress\n  , uint64 _nonce\n  , bytes memory _payload\n  ) external\n    override {\n    if (msg.sender != address(endpoint)) {\n      revert MaxSplaining({\n        reason: \"NBR:1\"\n      });\n    }\n\n    if (\n      _srcAddress.length != trustedRemoteLookup[_srcChainId].length ||\n      keccak256(_srcAddress) != keccak256(trustedRemoteLookup[_srcChainId])\n    ) {\n      revert MaxSplaining({\n        reason: \"NBR:2\"\n      });\n    }\n\n    // try-catch all errors/exceptions\n    // having failed messages does not block messages passing\n    try this.onLzReceive(_srcChainId, _srcAddress, _nonce, _payload) {\n      // do nothing\n    } catch {\n      // error or exception\n      failedMessages[_srcChainId][_srcAddress][_nonce] = FailedMessages(_payload.length, keccak256(_payload));\n      emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\n    }\n  }\n\n  // @notice this is the catch all above (should be an internal?)\n  // @param _srcChainId - the source endpoint identifier\n  // @param _srcAddress - the source sending contract address from the source chain\n  // @param _nonce - the ordered message nonce\n  // @param _payload - the signed payload is the UA bytes has encoded to be sent\n  function onLzReceive(\n    uint16 _srcChainId\n  , bytes memory _srcAddress\n  , uint64 _nonce\n  , bytes memory _payload\n  ) public {\n\n    // only internal transaction\n    if (msg.sender != address(this)) {\n      revert MaxSplaining({\n        reason: \"NBR:3\"\n      });\n    }\n\n    // handle incoming message\n    _LzReceive( _srcChainId, _srcAddress, _nonce, _payload);\n  }\n\n  // @notice internal function to do something in the main contract\n  // @param _srcChainId - the source endpoint identifier\n  // @param _srcAddress - the source sending contract address from the source chain\n  // @param _nonce - the ordered message nonce\n  // @param _payload - the signed payload is the UA bytes has encoded to be sent\n  function _LzReceive(\n    uint16 _srcChainId\n  , bytes memory _srcAddress\n  , uint64 _nonce\n  , bytes memory _payload\n  ) virtual\n    internal;\n\n  // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\n  // @param _dstChainId - the destination chain identifier\n  // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\n  // @param _payload - a custom bytes payload to send to the destination contract\n  // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\n  // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\n  // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\n  function _lzSend(\n    uint16 _dstChainId\n  , bytes memory _payload\n  , address payable _refundAddress\n  , address _zroPaymentAddress\n  , bytes memory _txParam\n  ) internal {\n    endpoint.send{value: msg.value}(\n      _dstChainId\n    , trustedRemoteLookup[_dstChainId]\n    , _payload, _refundAddress\n    , _zroPaymentAddress\n    , _txParam);\n  }\n\n  // @notice this is to retry a failed message on LayerZero\n  // @param _srcChainId - the source chain identifier\n  // @param _srcAddress - the source chain contract address\n  // @param _nonce - the ordered message nonce\n  // @param _payload - the payload to be retried\n  function retryMessage(\n    uint16 _srcChainId\n  , bytes memory _srcAddress\n  , uint64 _nonce\n  , bytes calldata _payload\n  ) external\n    payable {\n    // assert there is message to retry\n    FailedMessages storage failedMsg = failedMessages[_srcChainId][_srcAddress][_nonce];\n    if (failedMsg.payloadHash == bytes32(0)) {\n      revert MaxSplaining({\n        reason: \"NBR:4\"\n      });\n    }\n    if (\n      _payload.length != failedMsg.payloadLength ||\n      keccak256(_payload) != failedMsg.payloadHash\n    ) {\n      revert MaxSplaining({\n        reason: \"NBR:5\"\n      });\n    }\n\n    // clear the stored message\n    failedMsg.payloadLength = 0;\n    failedMsg.payloadHash = bytes32(0);\n\n    // execute the message. revert if it fails again\n    this.onLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n  }\n\n\n  // @notice this is to set all valid incoming messages\n  // @param _srcChainId - the source chain identifier\n  // @param _trustedRemote - the source chain contract address\n  function setTrustedRemote(\n    uint16 _chainId\n  , bytes calldata _trustedRemote\n  ) external\n    onlyDev() {\n    trustedRemoteLookup[_chainId] = _trustedRemote;\n    emit TrustedRemoteSet(_chainId, _trustedRemote);\n  }\n\n  // @notice this is to set all valid incoming messages\n  // @param _srcChainId - the source chain identifier\n  // @param _trustedRemote - the source chain contract address\n  function setEndPoint(\n    address newEndpoint\n  ) external\n    onlyDev() {\n    endpoint = ILayerZeroEndpoint(newEndpoint);\n    emit EndpointSet(newEndpoint);\n  }\n\n  /////////////////////////////////////////\n  /// EIP-173: Contract Ownership Standard\n  /////////////////////////////////////////\n\n  /// @notice Get the address of the owner    \n  /// @return The address of the owner.\n  function owner()\n    view\n    external\n    returns(address) {\n    return contractRoles.getOwner();\n  }\n\t\n  /// @notice Set the address of the new owner of the contract\n  /// @dev Set _newOwner to address(0) to renounce any ownership.\n  /// @param _newOwner The address of the new owner of the contract    \n  function transferOwnership(\n    address _newOwner\n  ) external\n    onlyRole(OWNERS) {\n    contractRoles.add(OWNERS, _newOwner);\n    contractRoles.setOwner(_newOwner);\n    contractRoles.remove(OWNERS, msg.sender);\n  }\n\n  ////////////////////////////////////////////////////////////////\n  /// EIP-173: Contract Ownership Standard, MaxFlowO2's extension\n  ////////////////////////////////////////////////////////////////\n\n  /// @dev This is the classic \"EIP-173\" method of renouncing onlyOwner()  \n  function renounceOwnership()\n    external \n    onlyRole(OWNERS) {\n    contractRoles.setOwner(address(0));\n    contractRoles.remove(OWNERS, msg.sender);\n  }\n\n  /// @dev This accepts the push-pull method of onlyOwner()\n  function acceptOwnership()\n    external\n    onlyRole(PENDING_OWNERS) {\n    contractRoles.add(OWNERS, msg.sender);\n    contractRoles.setOwner(msg.sender);\n    contractRoles.remove(PENDING_OWNERS, msg.sender);\n  }\n\n  /// @dev This declines the push-pull method of onlyOwner()\n  function declineOwnership()\n    external\n    onlyRole(PENDING_OWNERS) {\n    contractRoles.remove(PENDING_OWNERS, msg.sender);\n  }\n\n  /// @dev This starts the push-pull method of onlyOwner()\n  /// @param newOwner: addres of new pending owner role\n  function pushOwnership(\n    address newOwner\n  ) external\n    onlyRole(OWNERS) {\n    contractRoles.add(PENDING_OWNERS, newOwner);\n  }\n\n  //////////////////////////////////////////////\n  /// [Not an EIP]: Contract Developer Standard\n  //////////////////////////////////////////////\n\n  /// @dev Classic \"EIP-173\" but for onlyDev()\n  /// @return Developer of contract\n  function developer()\n    external\n    view\n    returns (address) {\n    return contractRoles.getDeveloper();\n  }\n\n  /// @dev This renounces your role as onlyDev()\n  function renounceDeveloper()\n    external\n    onlyRole(DEVS) {\n    contractRoles.setDeveloper(address(0));\n    contractRoles.remove(DEVS, msg.sender);\n  }\n\n  /// @dev Classic \"EIP-173\" but for onlyDev()\n  /// @param newDeveloper: addres of new pending Developer role\n  function transferDeveloper(\n    address newDeveloper\n  ) external\n    onlyRole(DEVS) {\n    contractRoles.add(DEVS, newDeveloper);\n    contractRoles.setDeveloper(newDeveloper);\n    contractRoles.remove(DEVS, msg.sender);\n  }\n\n  /// @dev This accepts the push-pull method of onlyDev()\n  function acceptDeveloper()\n    external\n    onlyRole(PENDING_DEVS) {\n    contractRoles.add(DEVS, msg.sender);\n    contractRoles.setDeveloper(msg.sender);\n    contractRoles.remove(PENDING_DEVS, msg.sender);\n  }\n\n  /// @dev This declines the push-pull method of onlyDev()\n  function declineDeveloper()\n    external\n    onlyRole(PENDING_DEVS) {\n    contractRoles.remove(PENDING_DEVS, msg.sender);\n  }\n\n  /// @dev This starts the push-pull method of onlyDev()\n  /// @param newDeveloper: addres of new pending developer role\n  function pushDeveloper(\n    address newDeveloper\n  ) external\n    onlyRole(DEVS) {\n    contractRoles.add(PENDING_DEVS, newDeveloper);\n  }\n\n  //////////////////////////////////////////\n  /// [Not an EIP]: Contract Roles Standard\n  //////////////////////////////////////////\n\n  /// @dev Returns `true` if `account` has been granted `role`.\n  /// @param role: Bytes4 of a role\n  /// @param account: Address to check\n  /// @return bool true/false if account has role\n  function hasRole(\n    bytes4 role\n  , address account\n  ) external\n    view\n    returns (bool) {\n    return contractRoles.has(role, account);\n  }\n\n  /// @dev Returns the admin role that controls a role\n  /// @param role: Role to check\n  /// @return admin role\n  function getRoleAdmin(\n    bytes4 role\n  ) external\n    view \n    returns (bytes4) {\n    return ADMIN;\n  }\n\n  /// @dev Grants `role` to `account`\n  /// @param role: Bytes4 of a role\n  /// @param account: account to give role to\n  function grantRole(\n    bytes4 role\n  , address account\n  ) external\n    onlyRole(role) {\n    if (role == PENDING_DEVS || role == PENDING_OWNERS) {\n      revert Unauthorized();\n    } else {\n      contractRoles.add(role, account);\n    }\n  }\n\n  /// @dev Revokes `role` from `account`\n  /// @param role: Bytes4 of a role\n  /// @param account: account to revoke role from\n  function revokeRole(\n    bytes4 role\n  , address account\n  ) external\n    onlyRole(role) {\n    if (role == PENDING_DEVS || role == PENDING_OWNERS) {\n      if (account == msg.sender) {\n        contractRoles.remove(role, account);\n      } else {\n        revert Unauthorized();\n      }\n    } else {\n      contractRoles.remove(role, account);\n    }\n  }\n\n  /// @dev Renounces `role` from `account`\n  /// @param role: Bytes4 of a role\n  function renounceRole(\n    bytes4 role\n  ) external\n    onlyRole(role) {\n    contractRoles.remove(role, msg.sender);\n  }\n\n\n  //////////////////////////////////////////\n  /// EIP-165: Standard Interface Detection\n  //////////////////////////////////////////\n\n  /// @dev Query if a contract implements an interface\n  /// @param interfaceID The interface identifier, as specified in ERC-165\n  /// @notice Interface identification is specified in ERC-165. This function\n  ///  uses less than 30,000 gas.\n  /// @return `true` if the contract implements `interfaceID` and\n  ///  `interfaceID` is not 0xffffffff, `false` otherwise\n  function supportsInterface(\n    bytes4 interfaceID\n  ) external\n    view\n    virtual\n    override\n    returns (bool) {\n    return (\n      interfaceID == type(IERC173).interfaceId  ||\n      interfaceID == type(IMAX173).interfaceId  ||\n      interfaceID == type(IMAXDEV).interfaceId  ||\n      interfaceID == type(IRoles).interfaceId  ||\n      interfaceID == type(IERC20).interfaceId   \n    );\n  }\n \n  uint256[35] private __gap;\n}\n"},"project:/contracts/eip/165/IERC165.sol":{"content":"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\n *\n * @title: EIP-165: Standard Interface Detection\n * @author: Christian Reitwießner, Nick Johnson, Fabian Vogelsteller, Jordi Baylina, Konrad Feldmeier, William Entriken\n * @notice Creates a standard method to publish and detect what interfaces a smart contract implements.\n * @custom:source https://eips.ethereum.org/EIPS/eip-165\n * @custom:change-log interface ERC165 -> interface IERC165\n * @custom:change-log readability enhanced\n * @custom:change-log MIT -> Apache-2.0\n\n// SPDX-License-Identifier: Apache-2.0\n\n/******************************************************************************\n * Copyright and related rights waived via CC0.                               *\n *                                                                            *\n * Licensed under the Apache License, Version 2.0 (the \"License\");            *\n * you may not use this file except in compliance with the License.           *\n * You may obtain a copy of the License at                                    *\n *                                                                            *\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\n *                                                                            *\n * Unless required by applicable law or agreed to in writing, software        *\n * distributed under the License is distributed on an \"AS IS\" BASIS,          *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\n * See the License for the specific language governing permissions and        *\n * limitations under the License.                                             *\n ******************************************************************************/\n\npragma solidity >=0.8.0 <0.9.0;\n\ninterface IERC165 {\n\n  /// @notice Query if a contract implements an interface\n  /// @param interfaceID The interface identifier, as specified in ERC-165\n  /// @notice Interface identification is specified in ERC-165. This function\n  ///  uses less than 30,000 gas.\n  /// @return `true` if the contract implements `interfaceID` and\n  ///  `interfaceID` is not 0xffffffff, `false` otherwise\n  function supportsInterface(\n    bytes4 interfaceID\n  ) external\n    view\n    returns (bool);\n}\n"},"project:/contracts/eip/173/IERC173.sol":{"content":"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\n *\n * @title: EIP-173: Contract Ownership Standard\n * @author: Nick Mudge, Dan Finlay\n * @notice This specification defines standard functions for owning or controlling a contract.\n *          the ERC-165 identifier for this interface is 0x7f5828d0\n * @custom:URI https://eips.ethereum.org/EIPS/eip-173\n * @custom:change-log MIT -> Apache-2.0\n * @custom:change-log readability modification\n */\n\n// SPDX-License-Identifier: Apache-2.0\n\n/******************************************************************************\n * Copyright and related rights waived via CC0.                               *\n *                                                                            *\n * Licensed under the Apache License, Version 2.0 (the \"License\");            *\n * you may not use this file except in compliance with the License.           *\n * You may obtain a copy of the License at                                    *\n *                                                                            *\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\n *                                                                            *\n * Unless required by applicable law or agreed to in writing, software        *\n * distributed under the License is distributed on an \"AS IS\" BASIS,          *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\n * See the License for the specific language governing permissions and        *\n * limitations under the License.                                             *\n ******************************************************************************/\n\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"../../eip/165/IERC165.sol\";\n\ninterface IERC173 is IERC165 {\n\n  /// @dev This emits when ownership of a contract changes.    \n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /// @notice Get the address of the owner    \n  /// @return The address of the owner.\n  function owner()\n    view\n    external\n    returns(address);\n\t\n  /// @notice Set the address of the new owner of the contract\n  /// @dev Set _newOwner to address(0) to renounce any ownership.\n  /// @param _newOwner The address of the new owner of the contract    \n  function transferOwnership(\n    address _newOwner\n  ) external;\t\n}\n"},"project:/contracts/eip/20/IERC20.sol":{"content":"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\n *\n * @title:  EIP-20: Token Standard \n * @author: Fabian Vogelsteller, Vitalik Buterin\n * @notice The following standard allows for the implementation of a standard API for tokens within\n *      smart contracts. This standard provides basic functionality to transfer tokens, as well\n *      as allow tokens to be approved so they can be spent by another on-chain third party.\n * @custom:source https://eips.ethereum.org/EIPS/eip-20\n * @custom:change-log external -> external, string -> string memory (0.8.x)\n * @custom:change-log readability enhanced\n * @custom:change-log backwards compatability to EIP 165 added\n * @custom:change-log MIT -> Apache-2.0\n\n// SPDX-License-Identifier: Apache-2.0\n\n/******************************************************************************\n * Copyright and related rights waived via CC0.                               *\n *                                                                            *\n * Licensed under the Apache License, Version 2.0 (the \"License\");            *\n * you may not use this file except in compliance with the License.           *\n * You may obtain a copy of the License at                                    *\n *                                                                            *\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\n *                                                                            *\n * Unless required by applicable law or agreed to in writing, software        *\n * distributed under the License is distributed on an \"AS IS\" BASIS,          *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\n * See the License for the specific language governing permissions and        *\n * limitations under the License.                                             *\n ******************************************************************************/\n\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"../165/IERC165.sol\";\n\ninterface IERC20 is IERC165 {\n\n  /// @dev Transfer Event\n  /// @notice MUST trigger when tokens are transferred, including zero value transfers.\n  /// @notice A token contract which creates new tokens SHOULD trigger a Transfer event\n  ///         with the _from address set to 0x0 when tokens are created.\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n  /// @dev Approval Event\n  /// @notice MUST trigger on any successful call to approve(address _spender, uint256 _value).\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n  /// @dev OPTIONAL - This method can be used to improve usability, but interfaces and other\n  ///      contracts MUST NOT expect these values to be present.\n  /// @return string memory returns the name of the token - e.g. \"MyToken\".\n  function name()\n    external\n    view\n    returns (string memory);\n\n  /// @dev OPTIONAL - This method can be used to improve usability, but interfaces and other\n  ///      contracts MUST NOT expect these values to be present.\n  /// @return string memory returns the symbol of the token. E.g. “HIX”.\n  function symbol()\n    external\n    view\n    returns (string memory);\n\n  /// @dev OPTIONAL - This method can be used to improve usability, but interfaces and other\n  ///      contracts MUST NOT expect these values to be present.\n  /// @return uint8 returns the number of decimals the token uses - e.g. 8, means to divide the\n  ///         token amount by 100000000 to get its user representation.\n  function decimals()\n    external\n    view\n    returns (uint8);\n\n  /// @dev totalSupply\n  /// @return uint256 returns the total token supply.\n  function totalSupply()\n    external\n    view\n    returns (uint256);\n\n  /// @dev balanceOf\n  /// @return balance returns the account balance of another account with address _owner.\n  function balanceOf(\n    address _owner\n  ) external\n    view\n    returns (uint256 balance);\n\n  /// @dev transfer\n  /// @return success\n  /// @notice Transfers _value amount of tokens to address _to, and MUST fire the Transfer event.\n  ///         The function SHOULD throw if the message caller’s account balance does not have enough\n  ///         tokens to spend.\n  /// @notice Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer\n  ///         event.\n  function transfer(\n    address _to\n  , uint256 _value\n  ) external\n    returns (bool success);\n\n  /// @dev transferFrom\n  /// @return success\n  /// @notice The transferFrom method is used for a withdraw workflow, allowing contracts to transfer\n  ///         tokens on your behalf. This can be used for example to allow a contract to transfer\n  ///         tokens on your behalf and/or to charge fees in sub-currencies. The function SHOULD\n  ///         throw unless the _from account has deliberately authorized the sender of the message\n  ///         via some mechanism.\n  /// @notice Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer\n  ///         event.\n  function transferFrom(\n    address _from\n  , address _to\n  , uint256 _value\n  ) external\n    returns (bool success);\n\n  /// @dev approve\n  /// @return success\n  /// @notice Allows _spender to withdraw from your account multiple times, up to the _value amount.\n  ///         If this function is called again it overwrites the current allowance with _value.\n  /// @notice To prevent attack vectors like the one described here and discussed here, clients\n  ///         SHOULD make sure to create user interfaces in such a way that they set the allowance\n  ///         first to 0 before setting it to another value for the same spender. THOUGH The contract\n  ///         itself shouldn’t enforce it, to allow backwards compatibility with contracts deployed\n  ///         before\n  function approve(\n    address _spender\n  , uint256 _value\n  ) external\n    returns (bool success);\n\n  /// @dev allowance\n  /// @return remaining uint256 of allowance remaining\n  /// @notice Returns the amount which _spender is still allowed to withdraw from _owner.\n  function allowance(\n    address _owner\n  , address _spender\n  ) external\n    view\n    returns (uint256 remaining);\n\n}\n"},"project:/contracts/eip/20/IERC20Burn.sol":{"content":"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\n *\n * @title:  EIP-20: Token Standard, extension\n * @author: Unknown\n * @notice n/a\n * @custom:change-log backwards compatability to EIP 165 added\n * @custom:change-log MIT -> Apache-2.0\n\n// SPDX-License-Identifier: Apache-2.0\n\n/******************************************************************************\n * Copyright and related rights waived via CC0.                               *\n *                                                                            *\n * Licensed under the Apache License, Version 2.0 (the \"License\");            *\n * you may not use this file except in compliance with the License.           *\n * You may obtain a copy of the License at                                    *\n *                                                                            *\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\n *                                                                            *\n * Unless required by applicable law or agreed to in writing, software        *\n * distributed under the License is distributed on an \"AS IS\" BASIS,          *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\n * See the License for the specific language governing permissions and        *\n * limitations under the License.                                             *\n ******************************************************************************/\n\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"../165/IERC165.sol\";\n\ninterface IERC20Burn is IERC165 {\n\n  /// @dev to burn ERC20 tokens\n  /// @param amount uint256 amount of tokens to burn\n  function burn(\n    uint256 amount\n  ) external;\n\n  function deposit(uint256 amount) external returns (bool);\n  function withdraw(uint256 amount) external returns (bool);\n}\n"},"project:/contracts/errors/MaxErrors.sol":{"content":"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\n *\n * @title: [Not an EIP]: MaxErrors, so I can import errors, anywhere minus libraries\n * @author: Max Flow O2 -> @MaxFlowO2 on bird app/GitHub\n * @notice Does not have an ERC165 return since no external/public functions\n * @custom:change-log abstract contract -> interface\n */\n\n// SPDX-License-Identifier: Apache-2.0\n\n/******************************************************************************\n * Copyright 2022 Max Flow O2                                                 *\n *                                                                            *\n * Licensed under the Apache License, Version 2.0 (the \"License\");            *\n * you may not use this file except in compliance with the License.           *\n * You may obtain a copy of the License at                                    *\n *                                                                            *\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\n *                                                                            *\n * Unless required by applicable law or agreed to in writing, software        *\n * distributed under the License is distributed on an \"AS IS\" BASIS,          *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\n * See the License for the specific language governing permissions and        *\n * limitations under the License.                                             *\n ******************************************************************************/\n\npragma solidity >=0.8.0 <0.9.0;\n\ninterface MaxErrors {\n\n  /// @dev this is Unauthorized(), basically a catch all, zero description\n  /// @notice 0x82b42900 bytes4 of this\n  error Unauthorized();\n\n  /// @dev this is MaxSplaining(), giving you a reason, aka require(param, \"reason\")\n  /// @param reason: Use the \"Contract name: error\"\n  /// @notice 0x0661b792 bytes4 of this\n  error MaxSplaining(\n    string reason\n  );\n\n  /// @dev this is TooSoonJunior(), using times\n  /// @param yourTime: should almost always be block.timestamp\n  /// @param hitTime: the time you should have started\n  /// @notice 0xf3f82ac5 bytes4 of this\n  error TooSoonJunior(\n    uint yourTime\n  , uint hitTime\n  );\n\n  /// @dev this is TooLateBoomer(), using times\n  /// @param yourTime: should almost always be block.timestamp\n  /// @param hitTime: the time you should have ended\n  /// @notice 0x43c540ef bytes4 of this\n  error TooLateBoomer(\n    uint yourTime\n  , uint hitTime\n  );\n\n}\n"},"project:/contracts/fBombV3.1.sol":{"content":"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\n *\n * @title: Fantom Bomb, LZ ERC 20 for BOMB/wBOMB on destination chains\n * @author Max Flow O2 -> @MaxFlowO2 on bird app/GitHub\n */\n\n// SPDX-License-Identifier: Apache-2.0\n\n/******************************************************************************\n * Copyright 2022 Max Flow O2                                                 *\n *                                                                            *\n * Licensed under the Apache License, Version 2.0 (the \"License\");            *\n * you may not use this file except in compliance with the License.           *\n * You may obtain a copy of the License at                                    *\n *                                                                            *\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\n *                                                                            *\n * Unless required by applicable law or agreed to in writing, software        *\n * distributed under the License is distributed on an \"AS IS\" BASIS,          *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\n * See the License for the specific language governing permissions and        *\n * limitations under the License.                                             *\n ******************************************************************************/\n\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"./Max-20-UUPS-LZ.sol\";\nimport \"./lib/Safe20.sol\";\nimport \"./lib/20.sol\";\nimport \"./lib/Lists.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\ncontract fBOMB is Initializable\n                , Max20ImplementationUUPSLZ\n                , UUPSUpgradeable {\n\n  using Lib20 for Lib20.Token;\n  using Lists for Lists.Access;\n  using Safe20 for IERC20;\n\n  /// @custom:oz-upgrades-unsafe-allow constructor\n  constructor() {\n    _disableInitializers();\n  }\n\n  function initialize(\n    string memory _name\n  , string memory _symbol\n  , address _admin\n  , address _dev\n  , address _owner\n  ) initializer\n    public {\n      __Max20_init(_name, _symbol, 18,  _admin, _dev, _owner);\n      __UUPSUpgradeable_init();\n  }\n\n  function _authorizeUpgrade(address newImplementation)\n    internal\n    onlyRole(ADMIN)\n    override\n    {}\n\n  function addExempt(\n    address newAddress\n  ) external\n    virtual\n    onlyDev() {\n    taxExempt.add(newAddress);\n  }\n\n  function removeExempt(\n    address newAddress\n  ) external\n    virtual\n    onlyDev() {\n    taxExempt.remove(newAddress);\n  }\n\n  /// @dev transfer\n  /// @return success\n  /// @notice Transfers _value amount of tokens to address _to, and MUST fire the Transfer event.\n  ///         The function SHOULD throw if the message caller’s account balance does not have enough\n  ///         tokens to spend.\n  /// @notice Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer\n  ///         event.\n  function transfer(\n    address _to\n  , uint256 _value\n  ) external\n    virtual\n    override\n    returns (bool success) {\n    uint256 balanceUser = this.balanceOf(msg.sender);\n    if (_to == address(0)) {\n      revert MaxSplaining({\n        reason: \"Max20: to address(0)\"\n      });\n    } else if (_value > balanceUser) {\n      revert MaxSplaining({\n        reason: \"Max20: issuficient balance\"\n      });\n    } else {\n      if (taxExempt.onList(_to) || taxExempt.onList(msg.sender)) {\n        success = token20.doTransfer(msg.sender, _to, _value);\n        emit Transfer(msg.sender, _to, _value);\n      } else {\n        uint256 transValue = _value * 99 / 100;\n        success = token20.doTransfer(msg.sender, _to, transValue);\n        emit Transfer(msg.sender, _to, transValue);\n        token20.burn(msg.sender, _value - transValue);\n        emit Transfer(msg.sender, address(0), _value - transValue);\n      }\n    }\n  }\n\n  /// @dev transferFrom\n  /// @return success\n  /// @notice The transferFrom method is used for a withdraw workflow, allowing contracts to transfer\n  ///         tokens on your behalf. This can be used for example to allow a contract to transfer\n  ///         tokens on your behalf and/or to charge fees in sub-currencies. The function SHOULD\n  ///         throw unless the _from account has deliberately authorized the sender of the message\n  ///         via some mechanism.\n  /// @notice Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer\n  ///         event.\n  function transferFrom(\n    address _from\n  , address _to\n  , uint256 _value\n  ) external\n    virtual\n    override\n    returns (bool success) {\n    uint256 balanceUser = this.balanceOf(_from);\n    uint256 approveBal = this.allowance(_from, msg.sender);\n    if (_from == address(0) || _to == address(0)) {\n      revert MaxSplaining({\n        reason: \"Max20: to/from address(0)\"\n      });\n    } else if (_value > balanceUser) {\n      revert MaxSplaining({\n        reason: \"Max20: issuficient balance\"\n      });\n    } else if (_value > approveBal) {\n      revert MaxSplaining({\n        reason: \"Max20: not approved to spend _value\"\n      });\n    } else {\n      if (taxExempt.onList(_to) || taxExempt.onList(_from)) {\n        success = token20.doTransfer(_from, _to, _value);\n        emit Transfer(_from, _to, _value);\n        token20.setApprove(_from, msg.sender, approveBal - _value);\n        emit Approval(_from, msg.sender, approveBal - _value);\n      } else {\n        uint256 transValue = _value * 99 / 100;\n        success = token20.doTransfer(_from, _to, transValue);\n        emit Transfer(_from, _to, transValue);\n        token20.burn(_from, _value - transValue);\n        emit Transfer(_from, address(0), _value - transValue);\n        token20.setApprove(_from, msg.sender, approveBal - _value);\n        emit Approval(_from, msg.sender, approveBal - _value);\n      }\n    }\n  }\n\n  /// @dev burn\n  /// @return success\n  /// @notice Burns _value amount of tokens to address _to, and MUST fire the Transfer event.\n  ///         The function SHOULD throw if the message caller’s account balance does not have enough\n  ///         tokens to burn.\n  /// @notice Note burn of 0 values MUST be treated as normal transfers and fire the Transfer\n  ///         event.\n  function burn(\n    uint256 _value\n  ) external\n    virtual\n    returns (bool success) {\n    uint256 balanceUser = this.balanceOf(msg.sender);\n    if (_value > balanceUser) {\n      revert MaxSplaining({\n        reason: \"Max20: issuficient balance\"\n      });\n    } else {\n      token20.burn(msg.sender, _value);\n      success = true;\n      emit Transfer(msg.sender, address(0), _value);\n    }\n  }\n\n  function setTres(\n    address newAddress\n  ) external\n    virtual\n    onlyDev() {\n    treasury = newAddress;\n  }\n\n  // @notice This function transfers the ft from your address on the\n  //          source chain to the same address on the destination chain\n  // @param _chainId: the uint16 of desination chain (see LZ docs)\n  // @param _amount: amount to be sent\n  function traverseChains(\n    uint16 _chainId\n  , uint256 _amount\n  ) public\n    virtual\n    payable {\n    uint256 userBal = token20.getBalanceOf(msg.sender);\n    if (_amount > userBal) {\n      revert Unauthorized();\n    }\n    if (trustedRemoteLookup[_chainId].length == 0) {\n      revert MaxSplaining({\n        reason: \"Token: TR not set\"\n      });\n    }\n\n    // set the amout to burn and send to treasury\n    uint256 onePer = _amount / 100;\n    uint256 toTraverse;\n\n    // burn FT, eliminating it from circulation on src chain\n    if (taxExempt.onList(msg.sender)) {\n      toTraverse = _amount - onePer;\n      token20.doTransfer(msg.sender, treasury, onePer);\n      emit Transfer(msg.sender, treasury, onePer);\n      token20.burn(msg.sender, toTraverse);\n      emit Transfer(msg.sender, address(0), toTraverse);\n    } else {\n      toTraverse = _amount - (2 * onePer);\n      uint256 toBurn = _amount - onePer;\n      token20.doTransfer(msg.sender, treasury, onePer);\n      emit Transfer(msg.sender, treasury, onePer);\n      token20.burn(msg.sender, toBurn);\n      emit Transfer(msg.sender, address(0), toBurn);\n\n    }\n\n    // abi.encode() the payload with the values to send\n    bytes memory payload = abi.encode(\n                             msg.sender\n                           , toTraverse);\n\n    // encode adapterParams to specify more gas for the destination\n    uint16 version = 1;\n    bytes memory adapterParams = abi.encodePacked(\n                                   version\n                                 , gasForDestinationLzReceive);\n\n    // get the fees we need to pay to LayerZero + Relayer to cover message delivery\n    // you will be refunded for extra gas paid\n    (uint messageFee, ) = endpoint.estimateFees(\n                            _chainId\n                          , address(this)\n                          , payload\n                          , false\n                          , adapterParams);\n\n    // revert this transaction if the fees are not met\n    if (messageFee > msg.value) {\n      revert MaxSplaining({\n        reason: \"Token: message fee low\"\n      });\n    }\n\n    // send the transaction to the endpoint\n    endpoint.send{value: msg.value}(\n      _chainId,                           // destination chainId\n      trustedRemoteLookup[_chainId],      // destination address of nft contract\n      payload,                            // abi.encoded()'ed bytes\n      payable(msg.sender),                // refund address\n      address(0x0),                       // 'zroPaymentAddress' unused for this\n      adapterParams                       // txParameters\n    );\n  }\n\n  // @notice just in case this fixed variable limits us from future integrations\n  // @param newVal: new value for gas amount\n  function setGasForDestinationLzReceive(\n    uint newVal\n  ) external onlyDev() {\n    gasForDestinationLzReceive = newVal;\n  }\n\n  // @notice internal function to mint FT from migration\n  // @param _srcChainId - the source endpoint identifier\n  // @param _srcAddress - the source sending contract address from the source chain\n  // @param _nonce - the ordered message nonce\n  // @param _payload - the signed payload is the UA bytes has encoded to be sent\n  function _LzReceive(\n    uint16 _srcChainId\n  , bytes memory _srcAddress\n  , uint64 _nonce\n  , bytes memory _payload\n  ) override\n    internal {\n    // decode\n    (address toAddr, uint256 amount) = abi.decode(_payload, (address, uint256));\n\n    // mint the tokens back into existence on destination chain\n    token20.mint(toAddr, amount);\n    emit Transfer(address(0), toAddr, amount);\n  }\n\n  // @notice will return gas value for LZ\n  // @return: uint for gas value\n  function currentLZGas()\n    external\n    view\n    returns (uint256) {\n    return gasForDestinationLzReceive;\n  }  \n}\n"},"project:/contracts/lib/20.sol":{"content":"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\n *\n * @title: Library 20\n * @author: Max Flow O2 -> @MaxFlowO2 on bird app/GitHub\n * @notice Library for EIP 20\n * @custom:change-log Custom errors added above\n *\n * Include with 'using Lib20 for Lib20.Token;'\n */\n\n// SPDX-License-Identifier: Apache-2.0\n\n/******************************************************************************\n * Copyright 2022 Max Flow O2                                                 *\n *                                                                            *\n * Licensed under the Apache License, Version 2.0 (the \"License\");            *\n * you may not use this file except in compliance with the License.           *\n * You may obtain a copy of the License at                                    *\n *                                                                            *\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\n *                                                                            *\n * Unless required by applicable law or agreed to in writing, software        *\n * distributed under the License is distributed on an \"AS IS\" BASIS,          *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\n * See the License for the specific language governing permissions and        *\n * limitations under the License.                                             *\n ******************************************************************************/\n\npragma solidity >=0.8.0 <0.9.0;\n\nlibrary Lib20 {\n\n  struct Token {\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowances;\n    uint256 totalSupply;\n    uint8 decimals;\n    string name;\n    string symbol;\n  }\n\n  error MaxSplaining(string reason);\n\n  function setName(\n    Token storage token\n  , string memory newName\n  ) internal {\n    token.name = newName;\n  }\n\n  function getName(\n    Token storage token\n  ) internal\n    view\n    returns (string memory) {\n    return token.name;\n  }\n\n  function setSymbol(\n    Token storage token\n  , string memory newSymbol\n  ) internal {\n    token.symbol = newSymbol;\n  }\n\n  function getSymbol(\n    Token storage token\n  ) internal\n    view\n    returns (string memory) {\n    return token.symbol;\n  }\n\n  function setDecimals(\n    Token storage token\n  , uint8 newDecimals\n  ) internal {\n    token.decimals = newDecimals;\n  }\n\n  function getDecimals(\n    Token storage token\n  ) internal\n    view\n    returns (uint8) {\n    return token.decimals;\n  }\n\n  function getTotalSupply(\n    Token storage token\n  ) internal\n    view\n    returns (uint256) {\n    return token.totalSupply;\n  }\n\n  function getBalanceOf(\n    Token storage token\n  , address owner\n  ) internal\n    view\n    returns (uint256) {\n    return token.balances[owner];\n  }\n\n  function doTransfer(\n    Token storage token\n  , address from\n  , address to\n  , uint256 value\n  ) internal\n    returns (bool success) {\n    uint256 fromBal = getBalanceOf(token, from);\n    if (value > fromBal) {\n      revert MaxSplaining({\n        reason: \"Max20:1\"\n      });\n    }\n    unchecked {\n      token.balances[from] -= value;\n      token.balances[to] += value;\n    }\n    return true;\n  }\n\n  function getAllowance(\n    Token storage token\n  , address owner\n  , address spender\n  ) internal \n    view\n    returns (uint256) {\n    return token.allowances[owner][spender];\n  }\n\n  function setApprove(\n    Token storage token\n  , address owner\n  , address spender\n  , uint256 amount\n  ) internal \n    returns (bool) {\n    token.allowances[owner][spender] = amount;\n    return true;\n  }\n\n  function mint(\n    Token storage token\n  , address account\n  , uint256 amount\n  ) internal {\n    if (account == address(0)) {\n      revert MaxSplaining({\n        reason: \"Max20:2\"\n      });\n    }\n    token.totalSupply += amount;\n    unchecked {\n      token.balances[account] += amount;\n    }\n  }\n\n  function burn(\n    Token storage token\n  , address account\n  , uint256 amount\n  ) internal {\n    uint256 accountBal = getBalanceOf(token, account);\n    if (amount > accountBal) {\n      revert MaxSplaining({\n        reason: \"Max20:1\"\n      });\n    }\n    unchecked {\n      token.balances[account] = accountBal - amount;\n      token.totalSupply -= amount;\n    }\n  }\n}\n"},"project:/contracts/lib/CountersV2.sol":{"content":"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\n *\n * @title: CountersV2.sol\n * @author Matt Condon (@shrugs)\n * @notice Provides counters that can only be incremented, decremented, reset or set. \n * This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids\n * or counting request ids.\n * @custom:change-log MIT -> Apache-2.0\n * @custom:change-log Edited for more NFT functionality added .set(uint)\n * @custom:change-log added event CounterNumberChangedTo(uint _number).\n * @custom:change-log added error MaxSplaining(string reason).\n * @custom:change-log internal -> internal functions\n * @custom:error-code CountersV2:1 \"No negatives in uints\" - overflow protection\n *\n * Include with `using CountersV2 for CountersV2.Counter;`\n */\n\n// SPDX-License-Identifier: Apache-2.0\n\n/******************************************************************************\n * Copyright 2022 Max Flow O2                                                 *\n *                                                                            *\n * Licensed under the Apache License, Version 2.0 (the \"License\");            *\n * you may not use this file except in compliance with the License.           *\n * You may obtain a copy of the License at                                    *\n *                                                                            *\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\n *                                                                            *\n * Unless required by applicable law or agreed to in writing, software        *\n * distributed under the License is distributed on an \"AS IS\" BASIS,          *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\n * See the License for the specific language governing permissions and        *\n * limitations under the License.                                             *\n ******************************************************************************/\n\npragma solidity >=0.8.0 <0.9.0;\n\nlibrary CountersV2 {\n\n  struct Counter {\n    uint256 value;\n  }\n\n  event CounterNumberChangedTo(uint _number);\n\n  error MaxSplaining(string reason);\n\n  function current(\n    Counter storage counter\n  ) internal\n    view\n    returns (uint256) {\n    return counter.value;\n  }\n\n  function increment(\n    Counter storage counter\n  ) internal {\n    unchecked {\n      ++counter.value;\n    }\n  }\n\n  function decrement(\n    Counter storage counter\n  ) internal {\n    if (counter.value == 0) {\n      revert MaxSplaining({\n        reason : \"CountersV2:1\"\n      });\n    }\n    unchecked {\n      --counter.value;\n    }\n  }\n\n  function reset(\n    Counter storage counter\n  ) internal {\n    counter.value = 0;\n    emit CounterNumberChangedTo(counter.value);\n  }\n\n  function set(\n    Counter storage counter\n  , uint number\n  ) internal {\n    counter.value = number;\n    emit CounterNumberChangedTo(counter.value);\n  }  \n}\n\n"},"project:/contracts/lib/Lists.sol":{"content":"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\n *\n * @title: [Not an EIP]: Access lists\n * @author: @MaxFlowO2 on bird app/GitHub\n * @notice Formerly whitelists, now allowlist, or whatever it's called.\n * @custom:change-log removed end variable/functions (un-needed)\n * @custom:change-log variables renamed from lib whitelist\n * @custom:change-log internal -> internal\n * @custom:error-code Lists:1 \"(user) is already whitelisted.\"\n * @custom:error-code Lists:2 \"(user) is not whitelisted.\"\n * @custom:error-code Lists:3 \"Whitelist already enabled.\"\n * @custom:error-code Lists:4 \"Whitelist already disabled.\"\n * @custom:change-log added custom error codes\n * @custom:change-log removed import \"./Strings.sol\"; (un-needed)\n *\n * Include with 'using Lists for Lists.Access;'\n */\n\n// SPDX-License-Identifier: Apache-2.0\n\n/******************************************************************************\n * Copyright 2022 Max Flow O2                                                 *\n *                                                                            *\n * Licensed under the Apache License, Version 2.0 (the \"License\");            *\n * you may not use this file except in compliance with the License.           *\n * You may obtain a copy of the License at                                    *\n *                                                                            *\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\n *                                                                            *\n * Unless required by applicable law or agreed to in writing, software        *\n * distributed under the License is distributed on an \"AS IS\" BASIS,          *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\n * See the License for the specific language governing permissions and        *\n * limitations under the License.                                             *\n ******************************************************************************/\n\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"./CountersV2.sol\";\n\nlibrary Lists {\n\n  using CountersV2 for CountersV2.Counter;\n\n  event ListChanged(bool _old, bool _new, address _address);\n  event ListStatus(bool _old, bool _new);\n\n  error MaxSplaining(string reason);\n\n  struct Access {\n    bool _status;\n    CountersV2.Counter added;\n    CountersV2.Counter removed;\n    mapping(address => bool) allowed;\n  }\n\n  function add(\n    Access storage list\n  , address user\n  ) internal {\n    if (list.allowed[user]) {\n      revert  MaxSplaining({\n        reason : \"Lists:1\"\n      });\n    }\n    // since now all previous values are false no need for another variable\n    // and add them to the list!\n    list.allowed[user] = true;\n    // increment counter\n    list.added.increment();\n    // emit event\n    emit ListChanged(false, list.allowed[user], user);\n  }\n\n  function remove(\n    Access storage list\n  , address user\n  ) internal {\n    if (!list.allowed[user]) {\n      revert  MaxSplaining({\n        reason : \"Lists:2\"\n      });\n    }\n    // since now all previous values are true no need for another variable\n    // and remove them from the list!\n    list.allowed[user] = false;\n    // increment counter\n    list.removed.increment();\n    // emit event\n    emit ListChanged(true, list.allowed[user], user);\n  }\n\n  function enable(\n    Access storage list\n  ) internal {\n    if (list._status) {\n      revert  MaxSplaining({\n        reason : \"Lists:3\"\n      });\n    }\n    list._status = true;\n    emit ListStatus(false, list._status);\n  }\n\n  function disable(\n    Access storage list\n  ) internal {\n    if (!list._status) {\n      revert  MaxSplaining({\n        reason : \"Lists:4\"\n      });\n    }\n    list._status = false;\n    emit ListStatus(true, list._status);\n  }\n\n  function status(\n    Access storage list\n  ) internal\n    view\n    returns (bool) {\n    return list._status;\n  }\n\n  function totalAdded(\n    Access storage list\n  ) internal\n    view\n    returns (uint) {\n    return list.added.current();\n  }\n\n  function totalRemoved(\n    Access storage list\n  ) internal\n    view\n    returns (uint) {\n    return list.removed.current();\n  }\n\n  function onList(\n    Access storage list\n  , address user\n  ) internal\n    view\n    returns (bool) {\n    return list.allowed[user];\n  }\n}\n"},"project:/contracts/lib/Roles.sol":{"content":"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\n *\n * @title: Roles.sol\n * @author: Max Flow O2 -> @MaxFlowO2 on bird app/GitHub\n * @notice Library for MaxAcess.sol\n * @custom:error-code Roles:1 User has role already\n * @custom:error-code Roles:2 User does not have role to revoke\n * @custom:change-log custom errors added above\n * @custom:change-log cleaned up variables\n * @custom:change-log internal -> internal/internal\n *\n * Include with 'using Roles for Roles.Role;'\n */\n\n// SPDX-License-Identifier: Apache-2.0\n\n/******************************************************************************\n * Copyright 2022 Max Flow O2                                                 *\n *                                                                            *\n * Licensed under the Apache License, Version 2.0 (the \"License\");            *\n * you may not use this file except in compliance with the License.           *\n * You may obtain a copy of the License at                                    *\n *                                                                            *\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\n *                                                                            *\n * Unless required by applicable law or agreed to in writing, software        *\n * distributed under the License is distributed on an \"AS IS\" BASIS,          *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\n * See the License for the specific language governing permissions and        *\n * limitations under the License.                                             *\n ******************************************************************************/\n\npragma solidity >=0.8.0 <0.9.0;\n\nlibrary Roles {\n\n  bytes4 constant internal DEVS = 0xca4b208b;\n  bytes4 constant internal OWNERS = 0x8da5cb5b;\n  bytes4 constant internal ADMIN = 0xf851a440;\n\n  struct Role {\n    mapping(address => mapping(bytes4 => bool)) bearer;\n    address owner;\n    address developer;\n    address admin;\n  }\n\n  event RoleChanged(bytes4 _role, address _user, bool _status);\n  event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n  event DeveloperTransferred(address indexed previousDeveloper, address indexed newDeveloper);\n\n  error Unauthorized();\n  error MaxSplaining(string reason);\n\n  function add(\n    Role storage role\n  , bytes4 userRole\n  , address account\n  ) internal {\n    if (account == address(0)) {\n      revert Unauthorized();\n    } else if (has(role, userRole, account)) {\n      revert MaxSplaining({\n        reason: \"Roles:1\"\n      });\n    }\n    role.bearer[account][userRole] = true;\n    emit RoleChanged(userRole, account, true);\n  }\n\n  function remove(\n    Role storage role\n  , bytes4 userRole\n  , address account\n  ) internal {\n    if (account == address(0)) {\n      revert Unauthorized();\n    } else if (!has(role, userRole, account)) {\n      revert MaxSplaining({\n        reason: \"Roles:2\"\n      });\n    }\n    role.bearer[account][userRole] = false;\n    emit RoleChanged(userRole, account, false);\n  }\n\n  function has(\n    Role storage role\n  , bytes4  userRole\n  , address account\n  ) internal\n    view\n    returns (bool) {\n    if (account == address(0)) {\n      revert Unauthorized();\n    }\n    return role.bearer[account][userRole];\n  }\n\n  function setAdmin(\n    Role storage role\n  , address account\n  ) internal {\n    if (has(role, ADMIN, account)) {\n      address old = role.admin;\n      role.admin = account;\n      emit AdminTransferred(old, role.admin);\n    } else if (account == address(0)) {\n      address old = role.admin;\n      role.admin = account;\n      emit AdminTransferred(old, role.admin);\n    } else {\n      revert Unauthorized();\n    }\n  }\n\n  function setDeveloper(\n    Role storage role\n  , address account\n  ) internal {\n    if (has(role, DEVS, account)) {\n      address old = role.developer;\n      role.developer = account;\n      emit DeveloperTransferred(old, role.developer);\n    } else if (account == address(0)) {\n      address old = role.admin;\n      role.admin = account;\n      emit AdminTransferred(old, role.admin);\n    } else {\n      revert Unauthorized();\n    }\n  }\n\n  function setOwner(\n    Role storage role\n  , address account\n  ) internal {\n    if (has(role, OWNERS, account)) {\n      address old = role.owner;\n      role.owner = account;\n      emit OwnershipTransferred(old, role.owner);\n    } else if (account == address(0)) {\n      address old = role.admin;\n      role.admin = account;\n      emit AdminTransferred(old, role.admin);\n    } else {\n      revert Unauthorized();\n    }\n  }\n\n  function getAdmin(\n    Role storage role\n  ) internal \n    view\n    returns (address) {\n    return role.admin;\n  }\n\n  function getDeveloper(\n    Role storage role\n  ) internal\n    view\n    returns (address) {\n    return role.developer;\n  }\n\n  function getOwner(\n    Role storage role\n  ) internal\n    view\n    returns (address) {\n    return role.owner;\n  }\n}\n"},"project:/contracts/lib/Safe20.sol":{"content":"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\n *\n * @title: [Not an EIP] Safe ERC 20 Library\n * @author: Max Flow O2 -> @MaxFlowO2 on bird app/GitHub\n * @notice Library makes use of bool success on transfer, transferFrom and approve of EIP 20\n */\n\n// SPDX-License-Identifier: Apache-2.0\n\n/******************************************************************************\n * Copyright 2022 Max Flow O2                                                 *\n *                                                                            *\n * Licensed under the Apache License, Version 2.0 (the \"License\");            *\n * you may not use this file except in compliance with the License.           *\n * You may obtain a copy of the License at                                    *\n *                                                                            *\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\n *                                                                            *\n * Unless required by applicable law or agreed to in writing, software        *\n * distributed under the License is distributed on an \"AS IS\" BASIS,          *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\n * See the License for the specific language governing permissions and        *\n * limitations under the License.                                             *\n ******************************************************************************/\n\npragma solidity >= 0.8.0 < 0.9.0;\n\nimport \"../eip/20/IERC20.sol\";\n\nlibrary Safe20 {\n\n  error MaxSplaining(string reason);\n\n  function safeTransfer(\n    IERC20 token\n  , address to\n  , uint256 amount\n  ) internal {\n    if (!token.transfer(to, amount)) {\n      revert MaxSplaining({\n        reason: \"Safe20: token.transfer failed\"\n      });\n    }\n  }\n\n  function safeTransferFrom(\n    IERC20 token\n  , address from\n  , address to\n  , uint256 amount\n  ) internal {\n    if (!token.transferFrom(from, to, amount)) {\n      revert MaxSplaining({\n        reason: \"Safe20: token.transferFrom failed\"\n      });\n    }\n  }\n\n  function safeApprove(\n    IERC20 token\n  , address spender\n  , uint256 amount\n  ) internal {\n    if (!token.approve(spender, amount)) {\n      revert MaxSplaining({\n        reason: \"Safe20: token.approve failed\"\n      });\n    }\n  }\n}\n"},"project:/contracts/lz/ILayerZeroEndpoint.sol":{"content":"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\n *\n * @title: ILayerZeroEndpoint.sol\n * @author: LayerZero\n * @notice Interface for LayerZeroEndpoint\n * OG Source: https://etherscan.io/address/0xa74ae2c6fca0cedbaef30a8ceef834b247186bcf#code\n */\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\nimport \"./ILayerZeroUserApplicationConfig.sol\";\n\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\n  // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\n  // @param _dstChainId - the destination chain identifier\n  // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\n  // @param _payload - a custom bytes payload to send to the destination contract\n  // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\n  // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\n  // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\n  function send(\n    uint16 _dstChainId\n  , bytes calldata _destination\n  , bytes calldata _payload\n  , address payable _refundAddress\n  , address _zroPaymentAddress\n  , bytes calldata _adapterParams\n  ) external\n    payable;\n\n  // @notice used by the messaging library to publish verified payload\n  // @param _srcChainId - the source chain identifier\n  // @param _srcAddress - the source contract (as bytes) at the source chain\n  // @param _dstAddress - the address on destination chain\n  // @param _nonce - the unbound message ordering nonce\n  // @param _gasLimit - the gas limit for external contract execution\n  // @param _payload - verified payload to send to the destination contract\n  function receivePayload(\n    uint16 _srcChainId\n  , bytes calldata _srcAddress\n  , address _dstAddress\n  , uint64 _nonce\n  , uint _gasLimit\n  , bytes calldata _payload\n  ) external;\n\n  // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\n  // @param _srcChainId - the source chain identifier\n  // @param _srcAddress - the source chain contract address\n  function getInboundNonce(\n    uint16 _srcChainId\n  , bytes calldata _srcAddress\n  ) external\n    view\n    returns (uint64);\n\n  // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\n  // @param _srcAddress - the source chain contract address\n  function getOutboundNonce(\n    uint16 _dstChainId\n  , address _srcAddress\n  ) external\n    view\n    returns (uint64);\n\n  // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\n  // @param _dstChainId - the destination chain identifier\n  // @param _userApplication - the user app address on this EVM chain\n  // @param _payload - the custom message to send over LayerZero\n  // @param _payInZRO - if false, user app pays the protocol fee in native token\n  // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\n  function estimateFees(\n    uint16 _dstChainId\n  , address _userApplication\n  , bytes calldata _payload\n  , bool _payInZRO\n  , bytes calldata _adapterParam\n  ) external\n    view\n    returns (\n    uint nativeFee\n  , uint zroFee);\n\n  // @notice get this Endpoint's immutable source identifier\n  function getChainId()\n    external\n    view\n    returns (uint16);\n\n  // @notice the interface to retry failed message on this Endpoint destination\n  // @param _srcChainId - the source chain identifier\n  // @param _srcAddress - the source chain contract address\n  // @param _payload - the payload to be retried\n  function retryPayload(\n    uint16 _srcChainId\n  , bytes calldata _srcAddress\n  , bytes calldata _payload\n  ) external;\n\n  // @notice query if any STORED payload (message blocking) at the endpoint.\n  // @param _srcChainId - the source chain identifier\n  // @param _srcAddress - the source chain contract address\n  function hasStoredPayload(\n    uint16 _srcChainId\n  , bytes calldata _srcAddress\n  ) external\n    view\n    returns (bool);\n\n  // @notice query if the _libraryAddress is valid for sending msgs.\n  // @param _userApplication - the user app address on this EVM chain\n  function getSendLibraryAddress(\n    address _userApplication\n  ) external\n    view\n    returns (address);\n\n  // @notice query if the _libraryAddress is valid for receiving msgs.\n  // @param _userApplication - the user app address on this EVM chain\n  function getReceiveLibraryAddress(\n    address _userApplication\n  ) external\n    view\n    returns (address);\n\n  // @notice query if the non-reentrancy guard for send() is on\n  // @return true if the guard is on. false otherwise\n  function isSendingPayload()\n    external\n    view\n    returns (bool);\n\n  // @notice query if the non-reentrancy guard for receive() is on\n  // @return true if the guard is on. false otherwise\n  function isReceivingPayload()\n    external\n    view\n    returns (bool);\n\n  // @notice get the configuration of the LayerZero messaging library of the specified version\n  // @param _version - messaging library version\n  // @param _chainId - the chainId for the pending config change\n  // @param _userApplication - the contract address of the user application\n  // @param _configType - type of configuration. every messaging library has its own convention.\n  function getConfig(\n    uint16 _version\n  , uint16 _chainId\n  , address _userApplication\n  , uint _configType\n  ) external\n    view\n    returns (bytes memory);\n\n  // @notice get the send() LayerZero messaging library version\n  // @param _userApplication - the contract address of the user application\n  function getSendVersion(\n    address _userApplication\n  ) external\n    view\n    returns (uint16);\n\n  // @notice get the lzReceive() LayerZero messaging library version\n  // @param _userApplication - the contract address of the user application\n  function getReceiveVersion(\n    address _userApplication\n  ) external\n    view\n    returns (uint16);\n}\n\n"},"project:/contracts/lz/ILayerZeroReceiver.sol":{"content":"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\n *\n * @title: ILayerZeroReceiver.sol\n * @author: LayerZero\n * @notice Interface for LayerZeroReceiver\n * OG Source: https://etherscan.io/address/0xa74ae2c6fca0cedbaef30a8ceef834b247186bcf#code\n */\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface ILayerZeroReceiver {\n\n  // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\n  // @param _srcChainId - the source endpoint identifier\n  // @param _srcAddress - the source sending contract address from the source chain\n  // @param _nonce - the ordered message nonce\n  // @param _payload - the signed payload is the UA bytes has encoded to be sent\n  function lzReceive(\n    uint16 _srcChainId\n  , bytes calldata _srcAddress\n  , uint64 _nonce\n  , bytes calldata _payload\n  ) external;\n\n}\n\n"},"project:/contracts/lz/ILayerZeroUserApplicationConfig.sol":{"content":"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\n *\n * @title: ILayerZeroUserApplicationConfig.sol\n * @author: LayerZero\n * @notice Interface for LayerZeroUserApplicationConfig\n * OG Source: https://etherscan.io/address/0xa74ae2c6fca0cedbaef30a8ceef834b247186bcf#code\n */\n\n// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface ILayerZeroUserApplicationConfig {\n  // @notice set the configuration of the LayerZero messaging library of the specified version\n  // @param _version - messaging library version\n  // @param _chainId - the chainId for the pending config change\n  // @param _configType - type of configuration. every messaging library has its own convention.\n  // @param _config - configuration in the bytes. can encode arbitrary content.\n  function setConfig(\n    uint16 _version\n  , uint16 _chainId\n  , uint _configType\n  , bytes calldata _config\n  ) external;\n\n  // @notice set the send() LayerZero messaging library version to _version\n  // @param _version - new messaging library version\n  function setSendVersion(\n    uint16 _version\n  ) external;\n\n  // @notice set the lzReceive() LayerZero messaging library version to _version\n  // @param _version - new messaging library version\n  function setReceiveVersion(\n    uint16 _version\n  ) external;\n\n  // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\n  // @param _srcChainId - the chainId of the source chain\n  // @param _srcAddress - the contract address of the source contract at the source chain\n  function forceResumeReceive(\n    uint16 _srcChainId\n  , bytes calldata _srcAddress\n  ) external;\n}\n\n"},"project:/contracts/modules/access/IMAX173.sol":{"content":"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#* \n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=: \n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%* \n *\n * @title:  EIP-173: Contract Ownership Standard, MaxFlowO2's extension\n * @author: Max Flow O2 -> @MaxFlowO2 on bird app/GitHub\n * @notice Interface for enhancing EIP-173\n * @custom:change-log UUPS Upgradable\n */\n\n// SPDX-License-Identifier: Apache-2.0\n\n/******************************************************************************\n * Copyright 2022 Max Flow O2                                                 *\n *                                                                            *\n * Licensed under the Apache License, Version 2.0 (the \"License\");            *\n * you may not use this file except in compliance with the License.           *\n * You may obtain a copy of the License at                                    *\n *                                                                            *\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\n *                                                                            *\n * Unless required by applicable law or agreed to in writing, software        *\n * distributed under the License is distributed on an \"AS IS\" BASIS,          *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\n * See the License for the specific language governing permissions and        *\n * limitations under the License.                                             *\n ******************************************************************************/\n\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"../../eip/173/IERC173.sol\";\n\ninterface IMAX173 is IERC173 {\n\n  /// @dev This is the classic \"EIP-173\" method of renouncing onlyOwner()  \n  function renounceOwnership()\n    external;\n\n  /// @dev This accepts the push-pull method of onlyOwner()\n  function acceptOwnership()\n    external;\n\n  /// @dev This declines the push-pull method of onlyOwner()\n  function declineOwnership()\n    external;\n\n  /// @dev This starts the push-pull method of onlyOwner()\n  /// @param newOwner: addres of new pending owner role\n  function pushOwnership(\n    address newOwner\n  ) external;\n\n}\n\n"},"project:/contracts/modules/access/IMAXDEV.sol":{"content":"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#* \n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=: \n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%* \n *\n * @title: [Not an EIP]: Contract Developer Standard\n * @author: Max Flow O2 -> @MaxFlowO2 on bird app/GitHub\n * @notice Interface for onlyDev() role\n */\n\n// SPDX-License-Identifier: Apache-2.0\n\n/******************************************************************************\n * Copyright 2022 Max Flow O2                                                 *\n *                                                                            *\n * Licensed under the Apache License, Version 2.0 (the \"License\");            *\n * you may not use this file except in compliance with the License.           *\n * You may obtain a copy of the License at                                    *\n *                                                                            *\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\n *                                                                            *\n * Unless required by applicable law or agreed to in writing, software        *\n * distributed under the License is distributed on an \"AS IS\" BASIS,          *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\n * See the License for the specific language governing permissions and        *\n * limitations under the License.                                             *\n ******************************************************************************/\n\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"../../eip/165/IERC165.sol\";\n\ninterface IMAXDEV is IERC165 {\n\n  /// @dev Classic \"EIP-173\" but for onlyDev()\n  /// @return Developer of contract\n  function developer()\n    external\n    view\n    returns (address);\n\n  /// @dev This renounces your role as onlyDev()\n  function renounceDeveloper()\n    external;\n\n  /// @dev Classic \"EIP-173\" but for onlyDev()\n  /// @param newDeveloper: addres of new pending Developer role\n  function transferDeveloper(\n    address newDeveloper\n  ) external;\n\n  /// @dev This accepts the push-pull method of onlyDev()\n  function acceptDeveloper()\n    external;\n\n  /// @dev This declines the push-pull method of onlyDev()\n  function declineDeveloper()\n    external;\n\n  /// @dev This starts the push-pull method of onlyDev()\n  /// @param newDeveloper: addres of new pending developer role\n  function pushDeveloper(\n    address newDeveloper\n  ) external;\n\n}\n"},"project:/contracts/modules/access/IRoles.sol":{"content":"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\n *\n * @title: [Not an EIP]: Contract Roles Standard\n * @author: Max Flow O2 -> @MaxFlowO2 on bird app/GitHub\n * @notice Interface for MaxAccess version of Roles\n */\n\n// SPDX-License-Identifier: Apache-2.0\n\n/******************************************************************************\n * Copyright 2022 Max Flow O2                                                 *\n *                                                                            *\n * Licensed under the Apache License, Version 2.0 (the \"License\");            *\n * you may not use this file except in compliance with the License.           *\n * You may obtain a copy of the License at                                    *\n *                                                                            *\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\n *                                                                            *\n * Unless required by applicable law or agreed to in writing, software        *\n * distributed under the License is distributed on an \"AS IS\" BASIS,          *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\n * See the License for the specific language governing permissions and        *\n * limitations under the License.                                             *\n ******************************************************************************/\n\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"../../eip/165/IERC165.sol\";\n\ninterface IRoles is IERC165 {\n\n  /// @dev Returns `true` if `account` has been granted `role`.\n  /// @param role: Bytes4 of a role\n  /// @param account: Address to check\n  /// @return bool true/false if account has role\n  function hasRole(\n    bytes4 role\n  , address account\n  ) external\n    view\n    returns (bool);\n\n  /// @dev Returns the admin role that controls a role\n  /// @param role: Role to check\n  /// @return admin role\n  function getRoleAdmin(\n    bytes4 role\n  ) external\n    view \n    returns (bytes4);\n\n  /// @dev Grants `role` to `account`\n  /// @param role: Bytes4 of a role\n  /// @param account: account to give role to\n  function grantRole(\n    bytes4 role\n  , address account\n  ) external;\n\n  /// @dev Revokes `role` from `account`\n  /// @param role: Bytes4 of a role\n  /// @param account: account to revoke role from\n  function revokeRole(\n    bytes4 role\n  , address account\n  ) external;\n\n  /// @dev Renounces `role` from `account`\n  /// @param role: Bytes4 of a role\n  function renounceRole(\n    bytes4 role\n  ) external;\n}\n\n"},"project:/contracts/modules/access/MaxAccess.sol":{"content":"/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+\n *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##\n *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*\n *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*\n * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:\n * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@\n * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+\n * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*\n *\n * @title: [Not an EIP]: MaxFlow's 173/Dev/Roles Interface\n * @author: Max Flow O2 -> @MaxFlowO2 on bird app/GitHub\n * @notice Interface for MaxAccess\n */\n\n// SPDX-License-Identifier: Apache-2.0\n\n/******************************************************************************\n * Copyright 2022 Max Flow O2                                                 *\n *                                                                            *\n * Licensed under the Apache License, Version 2.0 (the \"License\");            *\n * you may not use this file except in compliance with the License.           *\n * You may obtain a copy of the License at                                    *\n *                                                                            *\n *     http://www.apache.org/licenses/LICENSE-2.0                             *\n *                                                                            *\n * Unless required by applicable law or agreed to in writing, software        *\n * distributed under the License is distributed on an \"AS IS\" BASIS,          *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *\n * See the License for the specific language governing permissions and        *\n * limitations under the License.                                             *\n ******************************************************************************/\n\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"./IMAX173.sol\";\nimport \"./IMAXDEV.sol\";\nimport \"./IRoles.sol\";\n\ninterface MaxAccess is IMAX173\n                     , IMAXDEV\n                     , IRoles {\n\n  ///@dev this just imports all 3 and pushes to Implementation\n\n}\n"}},"settings":{"remappings":[],"optimizer":{"enabled":true,"runs":10000},"evmVersion":"paris"}}