/*     +%%#-                           ##.        =+.    .+#%#+:       *%%#:    .**+-      =+
 *   .%@@*#*:                          @@: *%-   #%*=  .*@@=.  =%.   .%@@*%*   +@@=+=%   .%##
 *  .%@@- -=+                         *@% :@@-  #@=#  -@@*     +@-  :@@@: ==* -%%. ***   #@=*
 *  %@@:  -.*  :.                    +@@-.#@#  =@%#.   :.     -@*  :@@@.  -:# .%. *@#   *@#*
 * *%@-   +++ +@#.-- .*%*. .#@@*@#  %@@%*#@@: .@@=-.         -%-   #%@:   +*-   =*@*   -@%=:
 * @@%   =##  +@@#-..%%:%.-@@=-@@+  ..   +@%  #@#*+@:      .*=     @@%   =#*   -*. +#. %@#+*@
 * @@#  +@*   #@#  +@@. -+@@+#*@% =#:    #@= :@@-.%#      -=.  :   @@# .*@*  =@=  :*@:=@@-:@+
 * -#%+@#-  :@#@@+%++@*@*:=%+..%%#=      *@  *@++##.    =%@%@%%#-  =#%+@#-   :*+**+=: %%++%*
 *
 * @title: Canto Turnstile Interface
 * @author Max Flow O2 -> @MaxFlowO2 on bird app/GitHub
 */

// SPDX-License-Identifier: Apache-2.0

/******************************************************************************
 * Copyright 2022 Max Flow O2                                                 *
 *                                                                            *
 * Licensed under the Apache License, Version 2.0 (the "License");            *
 * you may not use this file except in compliance with the License.           *
 * You may obtain a copy of the License at                                    *
 *                                                                            *
 *     http://www.apache.org/licenses/LICENSE-2.0                             *
 *                                                                            *
 * Unless required by applicable law or agreed to in writing, software        *
 * distributed under the License is distributed on an "AS IS" BASIS,          *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *
 * See the License for the specific language governing permissions and        *
 * limitations under the License.                                             *
 ******************************************************************************/

pragma solidity >=0.8.0 <0.9.0;

interface Turnstile {
  /// @notice Returns current value of counter used to tokenId of new minted NFTs
  /// @return current counter value
  function currentCounterId()
    external
    view
    returns (uint256);
  
  /// @notice Returns tokenId that collects fees generated by the smart contract
  /// @param _smartContract address of the smart contract
  /// @return tokenId that collects fees generated by the smart contract
  function getTokenId(
    address _smartContract
  ) external
    view
    returns (uint256);
  
  /// @notice Returns true if smart contract is registered to collect fees
  /// @param _smartContract address of the smart contract
  /// @return true if smart contract is registered to collect fees, false otherwise
  function isRegistered(
    address _smartContract
  ) external
    view
    returns (bool);
  
  /// @notice Mints ownership NFT that allows the owner to collect fees earned by the smart contract.
  ///         `msg.sender` is assumed to be a smart contract that earns fees. Only smart contract itself
  ///         can register a fee receipient.
  /// @param _recipient recipient of the ownership NFT
  /// @return tokenId of the ownership NFT that collects fees
  function register(
    address _recipient
  ) external 
    returns (uint256 tokenId);

  /// @notice Assigns smart contract to existing NFT. That NFT will collect fees generated by the smart contract.
  ///         Callable only by smart contract itself.
  /// @param _tokenId tokenId which will collect fees
  /// @return tokenId of the ownership NFT that collects fees
  function assign(
    uint256 _tokenId
  ) external
    returns (uint256);

  /// @notice Withdraws earned fees to `_recipient` address. Only callable by NFT owner.
  /// @param _tokenId token Id
  /// @param _recipient recipient of fees
  /// @param _amount amount of fees to withdraw
  /// @return amount of fees withdrawn
  function withdraw(
    uint256 _tokenId
  , address payable _recipient
  , uint256 _amount
  ) external
    returns (uint256);

  /// @notice Distributes collected fees to the smart contract. Only callable by owner.
  /// @param _tokenId NFT that earned fees
  function distributeFees(
    uint256 _tokenId
  ) external
    payable;
}
